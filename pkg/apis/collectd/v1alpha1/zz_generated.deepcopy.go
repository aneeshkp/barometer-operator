// +build !ignore_autogenerated

// Code generated by operator-sdk. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Barometer) DeepCopyInto(out *Barometer) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Barometer.
func (in *Barometer) DeepCopy() *Barometer {
	if in == nil {
		return nil
	}
	out := new(Barometer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Barometer) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BarometerList) DeepCopyInto(out *BarometerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Barometer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BarometerList.
func (in *BarometerList) DeepCopy() *BarometerList {
	if in == nil {
		return nil
	}
	out := new(BarometerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BarometerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BarometerSpec) DeepCopyInto(out *BarometerSpec) {
	*out = *in
	out.DeploymentPlan = in.DeploymentPlan
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BarometerSpec.
func (in *BarometerSpec) DeepCopy() *BarometerSpec {
	if in == nil {
		return nil
	}
	out := new(BarometerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BarometerStatus) DeepCopyInto(out *BarometerStatus) {
	*out = *in
	if in.PodNames != nil {
		in, out := &in.PodNames, &out.PodNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]CollectdCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BarometerStatus.
func (in *BarometerStatus) DeepCopy() *BarometerStatus {
	if in == nil {
		return nil
	}
	out := new(BarometerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CollectdCondition) DeepCopyInto(out *CollectdCondition) {
	*out = *in
	in.TransitionTime.DeepCopyInto(&out.TransitionTime)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CollectdCondition.
func (in *CollectdCondition) DeepCopy() *CollectdCondition {
	if in == nil {
		return nil
	}
	out := new(CollectdCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentPlanType) DeepCopyInto(out *DeploymentPlanType) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentPlanType.
func (in *DeploymentPlanType) DeepCopy() *DeploymentPlanType {
	if in == nil {
		return nil
	}
	out := new(DeploymentPlanType)
	in.DeepCopyInto(out)
	return out
}
